<?php

/**
 * @category Entities
 * @author   Jean-Loup Empis <jlempis@gmail.com>
 * @version  Release: 2.0.0
 */

namespace Gestime\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;

/**
 * EvenementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvenementRepository extends EntityRepository
{
    /**
     * getRendezVous (UtilisÃ© pour afficher l'agenda)
     * @param [type] $debut
     * @param [type] $fin
     * @param [type] $medecin
     * @return QyueryResult
     */
    public function getRendezVous($debut, $fin, $medecin)
    {
        $qb = $this->createQueryBuilder('r');
        $qb->select('r.idEvenement,
              r.debutRdv,
              r.finRdv,
              r.objet,
              r.type,
              r.rappel,
              r.nouveauPatient,
              med.idMedecin,
              med.nom,
              patient.civilite,
              patient.entreprise,
              patient.nom,
              patient.prenom,
              patient.nomJF,
              patient.telephone,
              param.idParametre,
              param.argument')
          ->leftjoin('r.medecin', 'med')
          ->leftjoin('r.patient', 'patient')
          ->leftjoin('Gestime\CoreBundle\Entity\Parametre', 'param', Join::WITH, 'r.type = param.code')
          ->andwhere('param.type = :type')
          ->andwhere('r.debutRdv >= :debut')
          ->andwhere('r.debutRdv <= :fin')
          ->andwhere('r.etat = :valide')
          ->andwhere('med.idMedecin = :medecin')
          ->orderby('r.debutRdv');

        $qb->setParameter('debut', $debut)
          ->setParameter('fin', $fin)
          ->setParameter('type', 'TypeRdv')
          ->setParameter('medecin', $medecin)
          ->setParameter('valide', 'V');

        return $qb->getQuery()->getResult();
    }

    /**
     * Recherche
     * @param [type] $medecinId
     * @param [type] $nom
     * @param [type] $prenom
     * @param [type] $telephone
     *
     * @return querybuilder
     */
    public function Recherche($medecinId, $nom, $prenom, $telephone)
    {
        $qb = $this->createQueryBuilder('rdv');
        $qb->select('rdv.idEvenement as rdv_idEvenement,
                     rdv.debutRdv as rdvDebut,
                     med.nom as medNom,
                     param.value as rdvType,
                     patient.nom as patientNom,
                     patient.prenom as patientPrenom,
                     patient.telephone as patientTelephone')
           ->leftjoin('rdv.medecin', 'med')
           ->leftjoin('rdv.patient', 'patient')
           ->leftjoin('Gestime\CoreBundle\Entity\Parametre', 'param', Join::WITH, 'rdv.type = param.code')
           ->where('rdv.etat = :valide')
           ->setParameter('valide', 'V');

        if ($medecinId >0) {
            $qb->andwhere('med.idMedecin = :medecinId')
            ->setParameter('medecinId', $medecinId);
        }
        if ($nom != '[]') {
            $qb->andwhere($qb->expr()->like('patient.nom', ':nom'))
            ->setParameter('nom', '%'.$nom.'%');
        }
        if ($prenom != '[]') {
            $qb->andwhere($qb->expr()->like('patient.prenom', ':prenom'))
            ->setParameter('prenom', '%'.$prenom.'%');
        }
        if ($telephone != '[]') {
            $qb->andwhere($qb->expr()->like('patient.telephone', ':telephone'))
            ->setParameter('telephone', '%'.$telephone.'%');
        }
        $qb->orderBy('rdv.debutRdv DESC, med.nom, patient.nom, patient.prenom, patient.telephone')->setMaxResults(100);

        return $qb;
    }

    /**
     * qbListeRdv
     * @param integer  $medecinId
     * @param datetime $debut
     * @param datetime $fin
     * @param boolean  $byCreationDate
     * @return querybuilder
     */
    private function qbListeRdv($medecinId, $debut, $fin, $byCreationDate = false)
    {

        $qb = $this->createQueryBuilder('rdv')
                ->select("uti.id as uti_id,
                          rdv.idEvenement as rdv_idEvenement,
                          groupe.name as group_name,
                          rdv.debutRdv as rdv_debutRdv,
                          rdv.finRdv as rdv_finRdv,
                          rdv.objet as rdv_objet,
                          Concat(med.nom, ' ', med.prenom) as med_nom,
                          Concat(param.value,' ',patient.prenom,' ',patient.nom) as patient_nomcomplet,
                          param.value as param_value,
                          patient.nom as patient_nom,
                          patient.prenom as patient_prenom");

        $qb->leftjoin('rdv.medecin', 'med')
           ->leftjoin('rdv.createdBy', 'uti')
           ->leftjoin('rdv.patient', 'patient')
           ->leftJoin('Gestime\CoreBundle\Entity\Parametre',
               'param', Join::WITH, $qb->expr()->andX(
                   $qb->expr()->eq('patient.civilite', 'param.code'),
                   $qb->expr()->eq('param.type', ':civilite')
               )
           )
           ->setParameter('civilite', 'Civilite')
           ->leftjoin('uti.groups', 'groupe')
           ->where('rdv.createdBy IS NOT NULL');

        $orifnull = $qb->expr()->orX();
        $orifnull->add($qb->expr()->eq('groupe.name',  $qb->expr()->literal('API')));
        $orifnull->add($qb->expr()->like('groupe.name', ':groupname'));

        $qb->andWhere($orifnull)
             ->setParameter('groupname', 'SECRETAIRE%');

        if ($byCreationDate) {
            $qb->andwhere('rdv.updated >= :debut')
            ->andwhere('rdv.updated <= :fin');
        } else {
            $qb->andwhere('rdv.debutRdv >= :debut')
            ->andwhere('rdv.debutRdv <= :fin');
        }

        $qb->setParameter('debut', $debut)
          ->setParameter('fin', $fin);

        if ($medecinId >0) {
            $qb->andwhere('med.idMedecin = :medecinId')
            ->setParameter('medecinId', $medecinId);
        }
        $qb->orderBy('rdv.debutRdv DESC, med.nom, patient.nom');


        return $qb;
    }

    /**
     * ListeNonExcuses
     * @param integer  $medecinId
     * @param datetime $debut
     * @param datetime $fin
     * @return querybuilder
     */
    public function ListeNonExcuses($medecinId, $debut, $fin)
    {
        $qb = $this->qbListeRdv($medecinId, $debut, $fin);
        $qb->andwhere('rdv.etat = :valide')
        ->andwhere('rdv.nonExcuse = :vrai')
        ->setParameter('vrai', true)
        ->setParameter('valide', 'V');

        return $qb;
    }

    /**
     * ListeMouvements
     * @param integer  $medecinId
     * @param datetime $debut
     * @param datetime $fin
     * @return querybuilder
     */
    public function ListeMouvements($medecinId, $debut, $fin)
    {
        $qb = $this->qbListeRdv($medecinId, $debut, $fin, true);
        $qb->addselect('rdv.etat, rdvsuiv.idEvenement, groupesuiv.name as name2, rdvsuiv.debutRdv as debutRdv2,
                    rdvsuiv.finRdv as finRdv2, rdvsuiv.objet as objet2, paramsuiv.value as value2,
                    patientsuiv.nom as nom2, patientsuiv.prenom as prenom2, relation.type')
        ->leftjoin('rdv.precedent', 'relation')
        ->leftjoin('relation.evenementSuivant', 'rdvsuiv')
        ->leftjoin('rdvsuiv.createdBy', 'utisuiv')
        ->leftjoin('rdvsuiv.patient', 'patientsuiv')
        ->leftJoin('Gestime\CoreBundle\Entity\Parametre',
            'paramsuiv', Join::WITH, $qb->expr()->andX(
                $qb->expr()->eq('patientsuiv.civilite', 'paramsuiv.code'),
                $qb->expr()->eq('paramsuiv.type', ':civilite')
            )
        )
        ->leftjoin('utisuiv.groups', 'groupesuiv')
        ->andwhere($qb->expr()->isNotNull('relation.type'));

        $orifnull = $qb->expr()->orX();
        $orifnull->add($qb->expr()->isNull('groupesuiv.name'));
        $orifnull->add($qb->expr()->eq('groupesuiv.name',  $qb->expr()->literal('API')));
        $orifnull->add($qb->expr()->like('groupesuiv.name', ':groupname'));

        $qb->andWhere($orifnull)
        ->orderBy('rdv.updated');

        return $qb;
    }

    /**
     * ListeRdvAjoutes
     * @param integer  $medecinId
     * @param datetime $debut
     * @param datetime $fin
     * @return querybuilder
     */
    public function ListeRdvAjoutes($medecinId, $debut, $fin)
    {
        $qb = $this->qbListeRdv($medecinId, $debut, $fin);
        $qb->andwhere('rdv.etat = :valide')
        ->setParameter('valide', 'V')
        ->andwhere('rdv.old_rdv_id = 0');

        return $qb;
    }

    /**
     * ListeRdvModifies
     * @param integer  $medecinId
     * @param datetime $debut
     * @param datetime $fin
     * @return querybuilder
     */
    public function ListeRdvModifies($medecinId, $debut, $fin)
    {
        $qb = $this->qbListeRdv($medecinId, $debut, $fin);
        $qb->leftJoin('Gestime\CoreBundle\Entity\Evenement', 'rdv2', Join::WITH, 'rdv2.idEvenement = rdv.old_rdv_id')
        ->andwhere('rdv.etat = :valide')
        ->setParameter('valide', 'V');

        return $qb;
    }

    /**
     * ListeRdvSupprimes
     * @param integer  $medecinId
     * @param datetime $debut
     * @param datetime $fin
     * @return querybuilder
     */
    public function ListeRdvSupprimes($medecinId, $debut, $fin)
    {
        $qb = $this->qbListeRdv($medecinId, $debut, $fin);
        $qb->andwhere('rdv.etat = :annule')
        ->setParameter('annule', 'A');

        return $qb;
    }

    /**
     * ListeRendezVous
     * @param integer  $medecinId
     * @param datetime $debut
     * @param datetime $fin
     * @return querybuilder
     */
    public function ListeRendezVous($medecinId, $debut, $fin)
    {

        $qb = $this->qbListeRdv($medecinId, $debut, $fin);
        $qb->andwhere('rdv.etat = :valide')
        ->setParameter('valide', 'V');

        return $qb;
    }

    /**
     * getRendezVousByType
     * @param Medecin  $medecin
     * @param datetime $debut
     * @param datetime $fin
     * @param string   $type    type du rendez-vous
     * @return [type] [description]
     */
    public function getRendezVousByType($medecin, $debut, $fin, $type)
    {
        return $this->createQueryBuilder('rdv')
                  ->select('rdv,patient, med')
                  ->leftjoin('rdv.medecin', 'med')
                  ->leftjoin('rdv.patient', 'patient')
                  ->where('rdv.medecin = :medecin')
                  ->andwhere('rdv.type = :type')
                  ->andwhere('rdv.debutRdv > :debut')
                  ->andwhere('rdv.debutRdv < :fin')
                  ->andwhere('rdv.etat = :valide')
                  ->setParameter('valide', 'V')
                  ->setParameter('medecin', $medecin)
                  ->setParameter('debut', $debut)
                  ->setParameter('fin', $fin)
                  ->setParameter('type', $type);
    }

    /**
     * getRendezVousById
     * @param integer $eventId
     * @return querybuilder
     */
    public function getRendezVousById($eventId)
    {
        $qb = $this->createQueryBuilder('r');

        $qb->select('r,patient, med, paramCivilite, paramTypeRdv, uti')
            ->leftjoin('r.medecin', 'med')
            ->leftjoin('r.patient', 'patient')
            ->leftjoin('r.updatedBy', 'uti')
            ->leftJoin('Gestime\CoreBundle\Entity\Parametre',
                'paramCivilite', Join::WITH, $qb->expr()->andX(
                    $qb->expr()->eq('patient.civilite', 'paramCivilite.code'),
                    $qb->expr()->eq('paramCivilite.type', ':civilite')
                )
            )
            ->leftJoin('Gestime\CoreBundle\Entity\Parametre',
                'paramTypeRdv', Join::WITH, $qb->expr()->andX(
                    $qb->expr()->eq('r.type', 'paramTypeRdv.code'),
                    $qb->expr()->eq('paramTypeRdv.type', ':typerdv')
                )
            )
            ->where('r.idEvenement = :eventId')
            ->setParameter('civilite', 'Civilite')
            ->setParameter('typerdv', 'TypeRdv')
            ->setParameter('eventId', $eventId);

        return $qb;
    }

    /**
     * [getCountRdv description]
     * @param Medecin $medecin
     * @return [type] [description]
     */
    public function getCountRdv($medecin)
    {
        return $this->createQueryBuilder('r')
                      ->select('COUNT(r)')
                      ->where('r.medecin = :medecin')
                      ->setParameter('medecin', $medecin->getIdMedecin())
                      ->getQuery()
                      ->getSingleScalarResult();
    }

    /**
     * getFirstRdv
     * @param Medecin  $medecin
     * @param dateTime $date
     * @param string   $heure
     * @return QueryBuilder
     */
    public function getFirstRdv($medecin, $date, $heure)
    {
        $qb = $this->createQueryBuilder('r');
        $qb->select('r, param.value, patient')
            ->leftjoin('r.patient', 'patient')
            ->leftJoin('Gestime\CoreBundle\Entity\Parametre',
                'param', Join::WITH, $qb->expr()->andX(
                    $qb->expr()->eq('patient.civilite', 'param.code'),
                    $qb->expr()->eq('param.type', ':civilite')
                )
            )
            ->setParameter('civilite', 'Civilite')
            ->where('r.medecin = :medecin')
            ->andwhere('r.debutRdv >= :date')
            ->setParameter('medecin', $medecin->getIdMedecin())
            ->setParameter('date', $date.' '.$heure)
            ->orderBy('r.debutRdv')
            ->setMaxResults(1);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * getLastRdv
     * @param Medecin  $medecin
     * @param dateTime $date
     * @param string   $heure
     * @return QueryBuilder
     */
    public function getLastRdv($medecin, $date, $heure)
    {
        $qb = $this->createQueryBuilder('r');
        $qb->select('r, param.value, patient')
           ->leftjoin('r.patient', 'patient')
           ->leftJoin('Gestime\CoreBundle\Entity\Parametre',
               'param', Join::WITH, $qb->expr()->andX(
                   $qb->expr()->eq('patient.civilite', 'param.code'),
                   $qb->expr()->eq('param.type', ':civilite')
               )
           )
           ->setParameter('civilite', 'Civilite')
           ->where('r.medecin = :medecin')
           ->andwhere('r.debutRdv <= :date')
           ->setParameter('medecin', $medecin->getIdMedecin())
           ->setParameter('date', $date.' '.$heure)
           ->orderBy('r.debutRdv', 'DESC')
           ->setMaxResults(1);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * getRappelsAFaire
     * rappel=0 : Pas de rappel, 1:A rappeler, 2:a Ã©tÃ© rappelÃ©
     *
     * @param Medecin  $medecin
     * @param dateTime $dateMini
     * @param dateTime $dateMaxi
     * @return QueryBuilder
     */
    public function getRappelsAFaire(Medecin $medecin, $dateMini, $dateMaxi)
    {
        $qb = $this->createQueryBuilder('r')
           ->where('r.medecin = :medecin')
           ->andwhere('r.debutRdv <= :dateMaxi')
           ->andwhere('r.debutRdv > :dateMini')
           ->andwhere('r.dateRappel is  NULL')
           ->andwhere('r.etat = :valide')
           ->setParameter('valide', 'V')
           ->setParameter('medecin', $medecin)
           ->setParameter('dateMaxi', $dateMaxi)
           ->setParameter('dateMini', $dateMini)
           ->orderBy('r.debutRdv', 'DESC');

        return $qb;
    }

    /**
     * getNonExcusesById
     * @param [type] $idMedecin [description]
     * @param [type] $idPatient [description]
     * @return [type] [description]
     */
    public function getNonExcusesById($idMedecin, $idPatient)
    {
        return $this->createQueryBuilder('r')
                      ->select('r.debutRdv')
                      ->leftjoin('r.medecin', 'med')
                      ->leftjoin('r.patient', 'patient')
                      ->where('med.idMedecin = :idMedecin')
                      ->andwhere('patient.id = :idPatient')
                      ->andwhere('r.nonExcuse = :vrai')
                      ->andwhere('r.etat = :valide')
                      ->setParameter('valide', 'V')
                      ->setParameter('vrai', true)
                      ->setParameter('idMedecin', $idMedecin)
                      ->setParameter('idPatient', $idPatient)
                      ->orderBy('r.debutRdv', 'DESC');
    }


  /**
   * @param $id
   * @return array
   */
  public function findRdvWebById($id) {
      return $this->createQueryBuilder('r')
        ->select('r.idEvenement, r.nonExcuse, r.debutRdv, med.idMedecin, med.nom as nommedecin, med.prenom, spec.id, spec.nom ')
        ->leftjoin('r.medecin', 'med')
        ->leftjoin('r.specialite', 'spec')
        ->leftjoin('r.patient', 'patient')
        ->where('patient.id = :id')
        ->andwhere('r.type = :web')
        ->andwhere('r.etat = :valide')
        ->setParameter('id', $id)
        ->setParameter('web', 'W')
        ->setParameter('valide', 'V')
        ->orderBy('r.debutRdv', 'DESC')
        ->getQuery()->getArrayResult();
    }


  /**
   * @param $numero
   * @return array
   */
  public function findRdvWebByPhone($numero) {
    return $this->createQueryBuilder('r')
      ->select('r.idEvenement, r.nonExcuse, r.debutRdv, med.idMedecin, med.nom as nommedecin, med.prenom, spec.id, spec.nom ')
      ->leftjoin('r.medecin', 'med')
      ->leftjoin('r.specialite', 'spec')
      ->leftjoin('r.patient', 'patient')
      ->where('patient.telephone = :numero')
      ->andwhere('r.type = :web')
      ->andwhere('r.etat = :valide')
      ->setParameter('web', 'W')
      ->setParameter('valide', 'V')
      ->setParameter('numero', $numero)
      ->orderBy('r.debutRdv', 'DESC')
      ->getQuery()->getArrayResult();
  }



}
