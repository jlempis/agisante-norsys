<?php

/**
 * @category Entities
 * @author   Jean-Loup Empis <jlempis@gmail.com>
 * @version  Release: 2.0.0
 */

namespace Gestime\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\DBAL\Types\Type;

/**
 * AbonneRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AbonneRepository extends EntityRepository
{
    /**
     * [getAbonneByName description]
     * @param String $name raisonSociale
     * @return querybuilder
     */
    public function getAbonneByName($name)
    {
        $qbAbonne = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.raisonSociale = :name')
            ->setParameter('name', $name);

        return $qbAbonne;
    }

    /**

     */
    public function getAllAbonnePeriodeRepondeur()
    {
        $qbAllAbonnePeriodeRepondeur = $this->createQueryBuilder('abo')
            ->select('substring(lig.numero,7,4), par.code as jour, per.debut, per.fin, rep.tag')
            ->from('Gestime\CoreBundle\Entity\Affectation', 'aff')
            ->from('Gestime\CoreBundle\Entity\Ligne', 'lig')
            ->from('Gestime\CoreBundle\Entity\AbonneRepondeur', 'per')
            ->from('Gestime\CoreBundle\Entity\Parametre', 'par')
            ->from('Gestime\CoreBundle\Entity\Repondeur', 'rep')
            ->where('aff.abonne= abo.idAbonne')
            ->andwhere('lig.idLigne = aff.ligne')
            ->andwhere('per.abonne = abo.idAbonne')
            ->andwhere('par.idParametre = per.jour')
            ->andwhere('rep.idRepondeur = per.repondeur')
            ->andwhere('aff.fin is NULL')
            ->orderBy('lig.numero, jour, per.debut, per.fin');

        return $qbAllAbonnePeriodeRepondeur->getQuery()->getResult();
    }

    private function sqlAddressesInCircle()
    {
      $sql = 'SELECT m.id, m.nom,  ';
      $sql.= '(ACOS( SIN( RADIANS( `latitude` ) ) * SIN( RADIANS( :latitude ) ) + COS( RADIANS( `latitude` ) ) * COS( RADIANS( :latitude )) * COS( RADIANS( `longitude` ) - RADIANS( :longitude )) ) * 6380) as dist ';
      $sql.= 'FROM Abonne a, Medecin m ';
      $sql.= 'WHERE a.id = m.abonne_id and m.rdvInternet=:rdvInternet and ';
      $sql.= 'ACOS( SIN( RADIANS( `latitude` ) ) * SIN( RADIANS( :latitude ) ) + COS( RADIANS( `latitude` ) ) * COS( RADIANS( :latitude )) * COS( RADIANS( `longitude` ) - RADIANS( :longitude )) ) * 6380 < :distance ';
      $sql.= 'order by dist LIMIT 10 ';

      return $sql;
    }


    /**
     * @param $latitude
     * @param $longitude
     * @param $distance
     * @return array
     */
    public function getMedecinsProches($latitude, $longitude, $distance, $rdvInternet) {

        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('Gestime\CoreBundle\Entity\Medecin', 'm');
        $rsm->addFieldResult('m', 'id', 'idMedecin');
        $rsm->addFieldResult('m', 'nom', 'nom');

        $query = $this->_em->createNativeQuery($this->sqlAddressesInCircle(), $rsm)
                           ->setParameter('latitude', $latitude)
                           ->setParameter('longitude', $longitude)
                           ->setParameter('rdvInternet', $rdvInternet)
                           ->setParameter('distance', $distance, Type::INTEGER);

        return $query->getResult();
      }

    /**
     * getAbonnes Récupère tous les abonnés d'un site
     * @param Site $site
     * @return querybuilder
     */
    public function getAbonnes($site)
    {
      $qb = $this->createQueryBuilder('a')
        ->where('a.site = :site')
        ->setParameter('site', $site);

      $qb->orderBy('a.raisonSociale', 'ASC');

      return $qb;
    }

}
