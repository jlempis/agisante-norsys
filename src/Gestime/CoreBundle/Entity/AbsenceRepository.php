<?php

namespace Gestime\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AbsenceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AbsenceRepository extends EntityRepository
{
    /**
     * Toutes les absences de tous les medeccins d'un site
     * @param Site $site
     * @return querybuilder
     */
    private function allAbsencesBySite($site)
    {
        return $this->createQueryBuilder('a')
            ->select('a,m')
            ->leftjoin('a.medecin', 'm')
            ->where('m.site = :site')
            ->andwhere('a.debut > :today')
            ->orderBy('m.nom', 'ASC')
            ->orderBy('m.prenom', 'ASC')
            ->addOrderBy('a.debut', 'ASC')
            ->setParameter('site', $site)
            ->setParameter('today', new \DateTime());
    }

    /**
     * Toutes les absences de tous les medeccins pour lesquels l'utilisateur est habilité
     * @param int $userId
     * @return querybuilder
     */
    private function allAbsencesByUser($userId)
    {
        return $this->createQueryBuilder('a')
            ->select('a,m')
            ->leftjoin('a.medecin', 'm')
            ->leftjoin('m.utilisateurs', 'u')
            ->where('u.id = :userId')
            ->andwhere('a.debut > :today')
            ->orderBy('m.nom', 'ASC')
            ->orderBy('m.prenom', 'ASC')
            ->addOrderBy('a.debut', 'ASC')
            ->setParameter('userId', $userId)
            ->setParameter('today', new \DateTime());
    }

    /**
     * getAbsenceMdecinByDate
     * @param  Medecin  $idMedecin
     * @param  DateTime $debut
     * @param  DateTime $fin
     * @return array
     */
    public function getAbsenceMdecinByDate($idMedecin, $debut, $fin)
    {
        return $this->createQueryBuilder('a')
            ->select('a,m')
            ->leftjoin('a.medecin', 'm')
            ->where('m.idMedecin = :idMedecin')
            ->andwhere('a.debut = :debut')
            ->andwhere('a.fin = :fin')
            ->setParameter('debut', $debut)
            ->setParameter('fin', $fin)
            ->setParameter('idMedecin', $idMedecin)
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * Get getAbsencesUser
     *
     * Retourne la liste des absences des medecins du site de l'utilisateur
     * Utilisé pour les utilisateurs qui sont admin d'un site
     * Ils ont alors le droit de voir tous les medecins du site
     * @param  boolean $tous
     * @param  Site    $site
     * @param  integer $userId
     * @return [Collection]
     */
    public function getAbsencesUser($tous, $site, $userId)
    {
        if ($tous) {
            return $this->allAbsencesBySite($site);
        } else {
            return $this->allAbsencesByUser($userId);
        }
    }

    /**
     * getAbsencesMedecin
     * @param integer  $idMedecin
     * @param datetime $debut
     * @param datetime $fin
     * @return array
     */
    public function getAbsencesMedecin($idMedecin, $debut='2015-01-01', $fin='2025-12-31')
    {
        return $this->createQueryBuilder('a')
            ->select('a.debut, a.fin, a.commentaire')
            ->leftjoin('a.medecin', 'm')
            ->where('m.idMedecin = :idMedecin')
            ->andwhere('a.fin >= :debut')
            ->andwhere('a.debut <= :fin')
            ->setParameter('idMedecin', $idMedecin)
            ->setParameter('debut', $debut)
            ->setParameter('fin', $fin)
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * [getAnnotations description]
     * @param integer $idMedecin
     * @return querybuilder
     */
    public function getAnnotations($idMedecin)
    {
        return $this->createQueryBuilder('m')
            ->select('j.value as day , h.debut as start, h.fin, a.value as activite , c.value as cssClass,  h.texte as text')
            ->join('m.horaires', 'h')
            ->join('h.jour', 'j')
            ->join('h.activite', 'a')
            ->join('h.classe', 'c')
            ->where('m.idMedecin = :idMedecin')
            ->setParameter('idMedecin', $idMedecin)
            ->getQuery()
            ->getArrayResult();
    }



    /**
     * getAbsencesMedecinByPeriode
     * @param integer  $idMedecin
     * @param datetime $date
     * @return array
     */
    public function getRemplacements($idMedecin, $date)
    {
        return $this->createQueryBuilder('a')
            ->select('r.debut, r.fin, mr.nom')
            ->leftjoin('a.medecin', 'm')
            ->leftjoin('a.remplacements', 'r')
            ->leftjoin('r.medecinRemplacant', 'mr')
            ->where('m.idMedecin = :idMedecin')
            ->andwhere('r.debut <= :date')
            ->andwhere('r.fin >= :date')
            ->setParameter('idMedecin', $idMedecin)
            ->setParameter('date', $date)
            ->getQuery()
            ->getResult();
    }

    public function getAbsenceByGestimeId($gestimeId)
    {
        return $this->createQueryBuilder('a')
            ->select('a')
            ->where('a.oldAbsenceId = :idAbsence')
            ->setParameter('idAbsence', $gestimeId)
            ->getQuery()
            ->getResult();
    }
}
