<?php

namespace Gestime\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;

/**
 * RelationEvenementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RelationEvenementRepository extends EntityRepository
{



  /**
   * ListeMouvements
   * @param integer  $medecinId
   * @param datetime $debut
   * @param datetime $fin
   * @return querybuilder
   */
  public function ListeMouvements($medecinId, $debut, $fin) {

    $qb = $this->createQueryBuilder('Relation')
      ->select("Relation.type as Relation_type,
                Relation.id as Relation_id,
                Medecin.nom as Medecin_nom,
                GroupeUtilisateurPrecedent.name as gPrecName,
                GroupeUtilisateurSuivant.name as gSuivName,
                Concat(CivilitePatientPrecedent.value,' ', PatientPrecedent.prenom, ' ', PatientPrecedent.nom) as ContactPrecedent,
                Concat(CivilitePatientSuivant.value,' ', PatientSuivant.prenom, ' ', PatientSuivant.nom) as ContactSuivant,
                EvenementPrecedent.objet as EvenementPrecedent_objet,
                EvenementPrecedent.debutRdv as EvenementPrecedent_debutRdv,
                EvenementPrecedent.finRdv as EvenementPrecedent_finRdv,
                EvenementSuivant.objet as EvenementSuivant_objet,
                EvenementSuivant.debutRdv as EvenementSuivant_debutRdv,
                EvenementSuivant.finRdv as EvenementSuivant_finRdv"
        )
      ->leftjoin('Relation.evenementPrecedent', 'EvenementPrecedent')
      ->leftjoin('Relation.evenementSuivant', 'EvenementSuivant')
      ->leftjoin('EvenementPrecedent.medecin', 'Medecin')
      ->leftjoin('EvenementPrecedent.updatedBy', 'UtilisateurPrecedent')
      ->leftjoin('UtilisateurPrecedent.groups', 'GroupeUtilisateurPrecedent')
      ->leftjoin('EvenementSuivant.createdBy', 'UtilisateurSuivant')
      ->leftjoin('UtilisateurSuivant.groups', 'GroupeUtilisateurSuivant')
      ->leftjoin('EvenementPrecedent.patient', 'PatientPrecedent')
      ->leftjoin('EvenementSuivant.patient', 'PatientSuivant');

    $qb
      ->leftJoin('Gestime\CoreBundle\Entity\Parametre',
        'CivilitePatientPrecedent', Join::WITH, $qb->expr()->andX(
          $qb->expr()->eq('PatientPrecedent.civilite', 'CivilitePatientPrecedent.code'),
          $qb->expr()->eq('CivilitePatientPrecedent.type', ':civilite')
        )
      )
      ->leftJoin('Gestime\CoreBundle\Entity\Parametre',
        'CivilitePatientSuivant', Join::WITH, $qb->expr()->andX(
          $qb->expr()->eq('PatientSuivant.civilite', 'CivilitePatientSuivant.code'),
          $qb->expr()->eq('CivilitePatientSuivant.type', ':civilite')
        )
      );

    $orifnull = $qb->expr()->orX();
    $orifnull->add($qb->expr()->eq('GroupeUtilisateurPrecedent.name',  $qb->expr()->literal('API')));
    $orifnull->add($qb->expr()->like('GroupeUtilisateurPrecedent.name', ':NameGroupeUtilisateurPrecedent'));
    $qb->andwhere($orifnull);

    $orifnull = $qb->expr()->orX();
    $orifnull->add($qb->expr()->isNull('GroupeUtilisateurSuivant.name'));
    $orifnull->add($qb->expr()->eq('GroupeUtilisateurSuivant.name',  $qb->expr()->literal('API')));
    $orifnull->add($qb->expr()->like('GroupeUtilisateurSuivant.name', ':NameGroupeUtilisateurSuivant'));
    $qb->andwhere($orifnull);

    if ($medecinId >0) {
      $qb->andwhere('Medecin.idMedecin = :medecinId')
        ->setParameter('medecinId', $medecinId);
    }

    $qb
      ->andwhere('Relation.created >= :debut')
      ->andwhere('Relation.created <= :fin')

      ->orderBy('Relation.created');

    $qb
      ->setParameter('civilite', 'Civilite')
      ->setParameter('debut', $debut)
      ->setParameter('fin', $fin)
      ->setParameter('NameGroupeUtilisateurPrecedent', 'SECRETAIRE%')
      ->setParameter('NameGroupeUtilisateurSuivant', 'SECRETAIRE%');

    return $qb;
  }
}
