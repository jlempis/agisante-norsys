<?php

namespace Gestime\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\DBAL\Types\Type;
/**
 * ProspectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProspectRepository extends \Doctrine\ORM\EntityRepository
{
  public function getNonGeocodedAdresses() {
    $qb = $this->createQueryBuilder('p');
    $qb->select('p')
      ->where('p.latitude = 0');

    return $qb->getQuery()->getResult();
  }


  private function sqlAddressesInCircle()
  {
    $sql = 'SELECT p.id, p.identifiant, p.nom, p.prenom, p.Adresse1, p.Adresse2, p.Adresse3, p.Adresse4, p.codePostal, p.ville, p.telephone, p.categorie, p.latitude, p.longitude, ';
    $sql.= '(ACOS( SIN( RADIANS( `latitude` ) ) * SIN( RADIANS( :latitude ) ) + COS( RADIANS( `latitude` ) ) * COS( RADIANS( :latitude )) * COS( RADIANS( `longitude` ) - RADIANS( :longitude )) ) * 6380) as dist ';
    $sql.= 'FROM Prospect p, prospect2specialite ps ';
    $sql.= 'WHERE p.nom <> "" and p.prenom <> "" and p.latitude > 0 and ';
    $sql.= 'ps.prospect_id = p.id and ps.specialite_id = :idSpecialite and ';
    $sql.= 'ACOS( SIN( RADIANS( `latitude` ) ) * SIN( RADIANS( :latitude ) ) + COS( RADIANS( `latitude` ) ) * COS( RADIANS( :latitude )) * COS( RADIANS( `longitude` ) - RADIANS( :longitude )) ) * 6380 < :distance ';
    $sql.= 'order by dist LIMIT 10 ';

    return $sql;
  }


  /**
   * @param $latitude
   * @param $longitude
   * @param $distance
   * @return array
   */
  public function getProspectsProches($idSpecialite, $latitude, $longitude, $distance) {

    $rsm = new ResultSetMapping();

    $rsm->addEntityResult('Gestime\CoreBundle\Entity\Prospect', 'p');
    $rsm->addFieldResult('p', 'id', 'idProspect');
    $rsm->addFieldResult('p', 'identifiant', 'identifiant');
    $rsm->addFieldResult('p', 'nom', 'nom');
    $rsm->addFieldResult('p', 'prenom', 'prenom');
    $rsm->addFieldResult('p', 'Adresse1', 'adresse1');
    $rsm->addFieldResult('p', 'Adresse2', 'adresse2');
    $rsm->addFieldResult('p', 'Adresse3', 'adresse3');
    $rsm->addFieldResult('p', 'Adresse4', 'adresse4');
    $rsm->addFieldResult('p', 'codePostal', 'codePostal');
    $rsm->addFieldResult('p', 'ville', 'ville');
    $rsm->addFieldResult('p', 'telephone', 'telephone');
    $rsm->addFieldResult('p', 'categorie', 'categorie');
    $rsm->addFieldResult('p', 'latitude', 'latitude');
    $rsm->addFieldResult('p', 'longitude', 'longitude');

    $query = $this->_em->createNativeQuery($this->sqlAddressesInCircle(), $rsm)
      ->setParameter('latitude', $latitude)
      ->setParameter('longitude', $longitude)
      ->setParameter('idSpecialite', $idSpecialite)
      ->setParameter('distance', $distance, Type::INTEGER);

    //dump($query); return array();
    return $query->getArrayResult();
  }

  public function getProspects()
  {
    $qbProspects = $this->createQueryBuilder('p')
      ->select('spe.nom as spe_nom, p.nom as p_nom, p.raisonSociale1 as p_raisonsoc,
      p.prenom as p_prenom, p.adresse3 as p_adresse3, p.codePostal as p_codePostal,
      p.ville as p_ville, p.telephone as p_telephone, p.idProspect as p_idProspect')
      ->leftjoin('p.specialites', 'spe');

    return $qbProspects;
  }

}
