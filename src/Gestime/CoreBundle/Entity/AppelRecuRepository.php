<?php

/**
 * @category Entities
 * @author   Jean-Loup Empis <jlempis@gmail.com>
 * @version  Release: 2.0.0
 */

namespace Gestime\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AppelRecuRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AppelRecuRepository extends EntityRepository
{
    private function _appelsRecus($debut, $fin, $groupement = false)
    {
        $qb = $this->createQueryBuilder('a')
        ->select('a.callDay,
             count(a.sda) as cpt,
             a.clid,
             upper(a.agent) AS test,
             ab.raisonSociale,
             a.dureeSonerie,
             a.dureeConversation,
             a.dureeTotale,
             med.nom,
             a.transfert,
             a.id')
        ->leftjoin('a.ligne', 'li')
        ->leftjoin('li.affectations', 'af')
        ->leftjoin('af.abonne', 'ab')
        ->leftjoin('a.telephoneTransfert', 'tel')
        ->leftjoin('tel.medecin', 'med');

        $ordebutnull = $qb->expr()->orx();
        $ordebutnull->add($qb->expr()->gt('a.callDay', 'af.debut'));
        $ordebutnull->add($qb->expr()->isNull('af.debut'));
        $qb->where($ordebutnull);

        $orfinnull = $qb->expr()->orx();
        $orfinnull->add($qb->expr()->lt('a.callDay', 'af.fin'));
        $orfinnull->add($qb->expr()->isNull('af.fin'));
        $qb->andWhere($orfinnull);

        $qb->andWhere('a.callDay >= :debut')
        ->andWhere('a.callDay <= :fin');

        if ($groupement) {
            $qb->groupBy('a.sda');
        }

        $qb->setParameter('debut', $debut)
        ->setParameter('fin', $fin);

        return $qb;
    }
    /**
     * [detailAppelsRecus description]
     * @param  [type] $debut [description]
     * @param  [type] $fin   [description]
     * @return [type]        [description]
     */
    public function detailAppelsRecus($debut, $fin)
    {
        return $this->_appelsRecus($debut, $fin);
    }

    private function _appelsRecusGroupe($debut, $fin)
    {
        $qb = $this->createQueryBuilder('a')
        ->select('a.callDay,
              Year(a.callDay) as annee,
              Month(a.callDay) as mois,
              Day(a.callDay) as jour,
              count(a.id) as nbappels,
              a.sda,
              ab.raisonSociale')
        ->leftjoin('a.ligne', 'li')
        ->leftjoin('li.affectations', 'af')
        ->leftjoin('af.abonne', 'ab');

        $ordebutnull = $qb->expr()->orx();
        $ordebutnull->add($qb->expr()->gt('a.callDay', 'af.debut'));
        $ordebutnull->add($qb->expr()->isNull('af.debut'));
        $qb->where($ordebutnull);

        $orfinnull = $qb->expr()->orx();
        $orfinnull->add($qb->expr()->lt('a.callDay', 'af.fin'));
        $orfinnull->add($qb->expr()->isNull('af.fin'));
        $qb->andWhere($orfinnull);

        $qb->andWhere('a.callDay >= :debut')
        ->andWhere('a.callDay <= :fin');

        $qb->setParameter('debut', $debut)
            ->setParameter('fin', $fin);

        return $qb;
    }
    /**
     * [appelsRecusByJourByAbonne description]
     * @param  [type] $debut [description]
     * @param  [type] $fin   [description]
     * @return [type]        [description]
     */
    public function appelsRecusByJourByAbonne($debut, $fin)
    {
        return $this->_appelsRecusGroupe($debut, $fin)->groupBy('annee', 'mois', 'jour', 'a.sda');
    }

    /**
     * [appelsRecusByJour description]
     * @param  [type] $debut [description]
     * @param  [type] $fin   [description]
     * @return [type]        [description]
     */
    public function appelsRecusByJour($debut, $fin)
    {
        return $this->_appelsRecusGroupe($debut, $fin)->groupBy('annee', 'mois', 'jour');
    }

    /**
     * [appelsRecusByAbonne description]
     * @param  [type] $debut [description]
     * @param  [type] $fin   [description]
     * @return [type]        [description]
     */
    public function appelsRecusByAbonne($debut, $fin)
    {
        return $this->_appelsRecusGroupe($debut, $fin)->groupBy('a.sda');
    }

    /**
     * [countAappelsRecus description]
     * @param  [type] $debut [description]
     * @param  [type] $fin   [description]
     * @return [type]        [description]
     */
    public function countAappelsRecus($debut, $fin)
    {
        $qb = $this->createQueryBuilder('a')
        ->select('count(a.id) as nbAppels')
        ->andWhere('a.callDay >= :debut')
        ->andWhere('a.callDay <= :fin');

        $qb->setParameter('debut', $debut)
            ->setParameter('fin', $fin);

        return $qb;
    }
}
