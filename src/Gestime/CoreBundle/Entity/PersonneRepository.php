<?php

/**
 * @category Entities
 * @author   Jean-Loup Empis <jlempis@gmail.com>
 * @version  Release: 2.0.0
 */

namespace Gestime\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PersonneRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonneRepository extends EntityRepository
{
    /**
     * Peuplement de la combo autocompletion "Laboratoire"
     *
     * Peuplement de la combo autocompletion "Laboratoire"
     * @param string  $term  Texte à rechercher
     * @param integer $limit Nombre maxi de lignes
     * @return querybuilder
     */
    public function findEntreprisesLike($term, $limit = 50)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('DISTINCT c.id, c.civilite, c.nomJF, c.entreprise, p.value, c.nom, c.prenom, c.telephone, adr.voie, adr.complement, adr.codePostal, ville.id as villeId, ville.nom as localite')
            ->leftJoin('c.adresses', 'adr')
            ->leftJoin('adr.ville', 'ville')
            ->leftJoin('Gestime\CoreBundle\Entity\Parametre', 'p',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'c.civilite = p.code'
            )
        ->where('c.entreprise LIKE :term')
        ->andwhere('p.type = :type')
        ->andwhere('c.etat = :etat')
        ->setParameter('etat', 'V')
        ->setParameter('term', $term.'%')
        ->setParameter('type', 'Civilite')
        ->orderBy('c.nom, c.prenom')
        ->setMaxResults($limit);

        $arrayAss = $qb->getQuery()->getArrayResult();

        // Transformer le tableau associatif en un tableau standard
        $array = array();
        foreach ($arrayAss as $data) {
            $array[] = array('Id' => $data['id'],
                             'ItemType'     => 'entreprise',
                             'Entreprise'   => $data['entreprise'],
                             'IdCivilite'   => $data['civilite'],
                             'Civilite'     => $data['value'],
                             'Nom'          => $data['nom'],
                             'Prenom'       => $data['prenom'],
                             'NomJF'        => $data['nomJF'],
                             'Telephone'    => $data['telephone'],
                             'Voie'         => $data['voie'],
                             'Complement'   => $data['complement'],
                             'CodePostal'   => $data['codePostal'],
                             'villeId'      => $data['villeId'],
                             'Localite'     => $data['localite'],
                             );
        }

        return $array;
    }

    /**
     * Peuplement de la combo autocompletion "Nom du patient"
     * @param integer $medecinId Id du medecin sélectionné
     * @param string  $term      Texte à rechercher
     * @param integer $limit     Nombre maxi de lignes
     * @return querybuilder
     */
    public function findPatientsLike($medecinId, $term, $limit = 50)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('DISTINCT c.id, c.civilite, c.nomJF, p.value, c.nom, c.prenom, c.telephone, adr.voie, adr.complement, adr.codePostal, ville.id as villeId, ville.nom as localite')
            ->leftJoin('c.medecins', 'medecin')
            ->leftJoin('c.adresses', 'adr')
            ->leftJoin('adr.ville', 'ville')
            ->leftJoin('Gestime\CoreBundle\Entity\Parametre', 'p',
                \Doctrine\ORM\Query\Expr\Join::WITH,
                'c.civilite = p.code'
            )
        ->where('c.nom LIKE :term')
        ->andwhere('p.type = :type')
        ->andwhere('c.etat = :etat')
        ->andwhere('medecin.idMedecin = :medecinId')
        ->setParameter('medecinId', $medecinId)
        ->setParameter('etat', 'V')
        ->setParameter('term', $term.'%')
        ->setParameter('type', 'Civilite')
        ->orderBy('c.nom, c.prenom')
        ->setMaxResults($limit);

        $arrayAss = $qb->getQuery()->getArrayResult();

        // Transformer le tableau associatif en un tableau standard
        $array = array();
        foreach ($arrayAss as $data) {
            $array[] = array('Id' => $data['id'],
                             'ItemType'     => 'nom',
                             'IdCivilite'   => $data['civilite'],
                             'Civilite'     => $data['value'],
                             'Nom'          => $data['nom'],
                             'Prenom'       => $data['prenom'],
                             'NomJF'        => $data['nomJF'],
                             'Telephone'    => $data['telephone'],
                             'Voie'         => $data['voie'],
                             'Complement'   => $data['complement'],
                             'CodePostal'   => $data['codePostal'],
                             'villeId'      => $data['villeId'],
                             'Localite'     => $data['localite'],
                             );
        }

        return $array;
    }

    /**
     * Recherche d'un patient par tous les champs
     * @param string  $civilite
     * @param string  $entreprise
     * @param Adresse $adresse
     * @param string  $nom
     * @param string  $prenom
     * @param string  $nomJF
     * @param string  $email
     * @param string  $telephone
     * @param string  $etat
     * @param string  $type
     * @return querybuilder
     */
    public function findByAllFields($civilite, $entreprise, $adresse, $nom, $prenom, $nomJF, $email, $telephone, $etat, $type)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p, adr')
            ->leftjoin('p.adresses', 'adr')
            ->where('p.civilite = :civilite')
            ->andwhere('p.nom = :nom')
            ->andwhere('p.prenom = :prenom')
            ->andwhere('p.telephone = :telephone')
            ->andwhere('p.etat = :etat')
            ->andwhere('p.type = :type')
            ->setParameter('civilite', $civilite)
            ->setParameter('nom', $nom)
            ->setParameter('prenom', $prenom)
            ->setParameter('telephone', $telephone)
            ->setParameter('etat', $etat)
            ->setParameter('type', $type);

        if (!is_null($nomJF)) {
            $qb = $qb->andwhere('p.nomJF = :nomJF')
                         ->setParameter('nomJF', $nomJF);
        }
        if (!is_null($entreprise)) {
            $qb = $qb->andwhere('p.entreprise = :entreprise')
                         ->setParameter('entreprise', $entreprise);
        }
        if (!is_null($email)) {
            $qb = $qb->andwhere('p.email = :email')
                         ->setParameter('email', $email);
        }

        $qb = $qb->getQuery()->getResult();

        return $qb;
    }

    /**
     * [findPatientById description]
     * @param integer $id
     * @return querybuilder
     */
    public function findPatientById($id)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p')
        ->where('p.id = :id')
        ->setParameter('id', $id);

        return $qb;
    }
}
